// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

generator default {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  fullName   String
  email      String   @unique
  password   String
  kycLinkId  String?  @unique
  kycLink    String?
  tosLink    String?
  kycStatus  String   @default("not_started")
  tosStatus  String   @default("pending")
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  bridgeCustomerId String? @unique

  Wallet             Wallet[]
  LiquidationAddress LiquidationAddress[]
  Card               Card?

  @@map("users")
}

model Wallet {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bridgeWalletId String @unique
  chain          String // stellar, ethereum, solana, etc.
  address        String // wallet address

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wallets")
}

model LiquidationAddress {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bridgeId                 String  @unique
  chain                    String // stellar, ethereum, solana, etc.
  address                  String // wallet address
  currency                 String // currency type (e.g., usdc, usdt)
  destination_payment_rail String // e.g., stellar, ethereum, solana
  destination_address      String // destination address for the liquidation
  destination_currency     String // destination currency type (e.g., usdc, usdt)
  blockchain_memo          String? // optional memo for blockchain transactions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Card {
  id          String @id @default(cuid())
  cardNumber  String @unique
  expiryMonth Int
  expiryYear  Int
  cvv         String

  usdcBalance Float @default(0)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
